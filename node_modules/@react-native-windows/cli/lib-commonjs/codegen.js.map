{"version":3,"file":"codegen.js","sourceRoot":"","sources":["../src/codegen.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\nimport path from 'path';\nimport chalk from 'chalk';\nimport {performance} from 'perf_hooks';\n\nimport {\n  newSpinner,\n  setExitProcessWithError,\n} from './runWindows/utils/commandWithProgress';\n\nimport {\n  Command,\n  CommandOption,\n  Config,\n} from '@react-native-community/cli-types';\nimport {Telemetry, CodedError} from '@react-native-windows/telemetry';\nimport {\n  getDefaultOptions,\n  startTelemetrySession,\n  endTelemetrySession,\n} from './runWindows/utils/telemetryHelpers';\n\nimport {runCodeGen} from '@react-native-windows/codegen';\nimport {Ora} from 'ora';\n\nexport class CodeGenWindows {\n  private changesNecessary: boolean;\n\n  public areChangesNeeded() {\n    return this.changesNecessary;\n  }\n\n  constructor(readonly root: string, readonly options: CodeGenOptions) {\n    this.changesNecessary = false;\n  }\n\n  public async run(spinner: Ora) {\n    const verbose = this.options.logging;\n\n    verboseMessage('', verbose);\n\n    verboseMessage('Loading codegenConfig from package.json');\n    const pkgJson = require(path.join(this.root, 'package.json'));\n\n    if (!pkgJson.codegenConfig) {\n      spinner.info(\n        `No ${chalk.bold(\n          'codegenConfig',\n        )} specified in package.json - ${chalk.yellow(\n          'Skipping codegen-windows',\n        )}`,\n      );\n      return;\n    }\n\n    const codegenConfigType = pkgJson.codegenConfig.type;\n    if (codegenConfigType !== 'modules' && codegenConfigType !== 'all') {\n      spinner.info(\n        `${chalk.bold(\n          'codegenConfig.type',\n        )} in package.json is not ${chalk.bold('modules')} or ${chalk.bold(\n          'all',\n        )} - ${chalk.yellow('Skipping codegen-windows')}`,\n      );\n      return;\n    }\n\n    if (!pkgJson.codegenConfig.windows) {\n      spinner.info(\n        `No ${chalk.bold(\n          'codegenConfig.windows',\n        )} specified in package.json - ${chalk.yellow(\n          'Skipping codegen-windows',\n        )}`,\n      );\n      return;\n    }\n\n    if (!pkgJson.codegenConfig.windows.namespace) {\n      throw new CodedError(\n        'InvalidCodegenConfig',\n        `Missing ${chalk.bold(\n          'codegenConfig.windows.namespace',\n        )} value in package.json`,\n      );\n    }\n\n    if (!pkgJson.codegenConfig.name) {\n      throw new CodedError(\n        'InvalidCodegenConfig',\n        `Missing ${chalk.bold('codegenConfig.name')} value in package.json`,\n      );\n    }\n\n    const projectName = pkgJson.codegenConfig.name.replace(/[^a-zA-Z]/g, '');\n    const projectNamespace = pkgJson.codegenConfig.windows.namespace;\n    const jsRootDir = pkgJson.codegenConfig.jsSrcsDir\n      ? path.join(this.root, pkgJson.codegenConfig.jsSrcsDir)\n      : this.root;\n\n    const generators = pkgJson.codegenConfig.windows.generators ?? [\n      'modulesWindows',\n    ];\n\n    const jsRootPathRelative = path.relative(process.cwd(), jsRootDir);\n    const options = {\n      files: [\n        `${jsRootPathRelative}${\n          jsRootPathRelative ? '/' : ''\n        }**/*Native*.[jt]s`,\n      ],\n      libraryName: projectName,\n      methodOnly: false,\n      modulesCxx: generators.indexOf('modulesCxx') !== -1,\n      modulesTypeScriptTypes:\n        generators.indexOf('modulesTypeScriptTypes') !== -1,\n      modulesWindows: generators.indexOf('modulesWindows') !== -1,\n      namespace: projectNamespace,\n      outputDirectory: path.join(this.root, 'codegen'),\n      test: !!this.options.check,\n    };\n\n    verboseMessage(\n      `Run codegen with options: \\n${JSON.stringify(options, null, 2)}`,\n      verbose,\n    );\n\n    this.changesNecessary = runCodeGen(options);\n\n    spinner.succeed();\n  }\n}\n\n/**\n * Logs the given message if verbose is True.\n * @param message The message to log.\n * @param verbose Whether or not verbose logging is enabled.\n */\nfunction verboseMessage(message: any, verbose?: boolean) {\n  if (verbose) {\n    console.log(message);\n  }\n}\n\n/**\n * Sanitizes the given option for telemetery.\n * @param key The key of the option.\n * @param value The unsanitized value of the option.\n * @returns The sanitized value of the option.\n */\nfunction optionSanitizer(key: keyof CodeGenOptions, value: any): any {\n  // Do not add a default case here.\n  // Strings risking PII should just return true if present, false otherwise.\n  // All others should return the value (or false if undefined).\n  switch (key) {\n    case 'logging':\n    case 'check':\n    case 'telemetry':\n      return value === undefined ? false : value; // Return value\n  }\n}\n\n/**\n * Get the extra props to add to the `codegen-windows` telemetry event.\n * @returns The extra props.\n */\nasync function getExtraProps(): Promise<Record<string, any>> {\n  const extraProps: Record<string, any> = {};\n  return extraProps;\n}\n\n/**\n * The function run when calling `react-native codegen-windows`.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nasync function codegenWindows(\n  args: string[],\n  config: Config,\n  options: CodeGenOptions,\n) {\n  await startTelemetrySession(\n    'codegen-windows',\n    config,\n    options,\n    getDefaultOptions(config, codegenOptions),\n    optionSanitizer,\n  );\n\n  let codegenWindowsError: Error | undefined;\n  try {\n    await codegenWindowsInternal(args, config, options);\n  } catch (ex) {\n    codegenWindowsError =\n      ex instanceof Error ? (ex as Error) : new Error(String(ex));\n    Telemetry.trackException(codegenWindowsError);\n  }\n\n  await endTelemetrySession(codegenWindowsError, getExtraProps);\n  setExitProcessWithError(options.logging, codegenWindowsError);\n}\n\n/**\n * Performs codegen for RNW native modules and apps.\n * @param args Unprocessed args passed from react-native CLI.\n * @param config Config passed from react-native CLI.\n * @param options Options passed from react-native CLI.\n */\nexport async function codegenWindowsInternal(\n  args: string[],\n  config: Config,\n  options: CodeGenOptions,\n) {\n  const startTime = performance.now();\n  const spinner = newSpinner(\n    options.check\n      ? 'Checking codegen-windows files...'\n      : 'Running codegen-windows...',\n  );\n  try {\n    const codegen = new CodeGenWindows(config.root, options);\n    await codegen.run(spinner);\n    const endTime = performance.now();\n\n    if (!codegen.areChangesNeeded()) {\n      console.log(\n        `${chalk.green(\n          'Success:',\n        )} No codegen-windows changes necessary. (${Math.round(\n          endTime - startTime,\n        )}ms)`,\n      );\n    } else if (options.check) {\n      const codegenCommand = 'npx react-native codegen-windows';\n      console.log(\n        `${chalk.yellow(\n          'Warning:',\n        )} Codegen-windows changes were necessary but ${chalk.bold(\n          '--check',\n        )} specified. Run '${chalk.bold(\n          `${codegenCommand}`,\n        )}' to apply the changes. (${Math.round(endTime - startTime)}ms)`,\n      );\n      throw new CodedError(\n        'NeedCodegen',\n        `Codegen-windows changes were necessary but --check was specified. Run '${codegenCommand}' to apply the changes`,\n      );\n    } else {\n      console.log(\n        `${chalk.green(\n          'Success:',\n        )} Codegen-windows changes completed. (${Math.round(\n          endTime - startTime,\n        )}ms)`,\n      );\n    }\n  } catch (e) {\n    spinner.fail();\n    const endTime = performance.now();\n    console.log(\n      `${chalk.red('Error:')} ${(e as any).toString()}. (${Math.round(\n        endTime - startTime,\n      )}ms)`,\n    );\n    throw e;\n  }\n}\n\nexport interface CodeGenOptions {\n  logging?: boolean;\n  check?: boolean;\n  telemetry?: boolean;\n}\n\nexport const codegenOptions: CommandOption[] = [\n  {\n    name: '--logging',\n    description: 'Verbose output logging',\n  },\n  {\n    name: '--check',\n    description: 'Only check whether any codegen files need to change',\n  },\n  {\n    name: '--no-telemetry',\n    description:\n      'Disables sending telemetry that allows analysis of usage and failures of the react-native-windows CLI',\n  },\n];\n\n/**\n * Performs codegen for RNW native modules.\n */\nexport const codegenCommand: Command = {\n  name: 'codegen-windows',\n  description: 'Runs Windows specific codegen',\n  func: codegenWindows,\n  options: codegenOptions,\n};\n"]}