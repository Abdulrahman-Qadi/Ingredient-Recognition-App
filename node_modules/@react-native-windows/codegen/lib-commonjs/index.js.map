{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport path from 'path';\nimport fs from '@react-native-windows/fs';\nimport globby from 'globby';\nimport {createNM2Generator} from './generators/GenerateNM2';\nimport {\n  generateTypeScript,\n  setOptionalTurboModule,\n} from './generators/GenerateTypeScript';\nimport type {SchemaType} from 'react-native-tscodegen';\n\n// Load react-native-codegen from react-native\nconst rnPath = path.dirname(require.resolve('react-native/package.json'));\nconst rncodegenPath = path.dirname(\n  require.resolve('react-native-codegen/package.json', {paths: [rnPath]}),\n);\nconst FlowParser = require(path.resolve(rncodegenPath, 'lib/parsers/flow'));\nconst TypeScriptParser = require(path.resolve(\n  rncodegenPath,\n  'lib/parsers/typescript',\n));\n\nconst schemaValidator = require(path.resolve(\n  rncodegenPath,\n  'lib/schemaValidator',\n));\n\ninterface Options {\n  libraryName: string;\n  methodOnly: boolean;\n  modulesCxx: boolean;\n  moduleSpecName: string;\n  modulesTypeScriptTypes: boolean;\n  modulesWindows: boolean;\n  namespace: string;\n  outputDirectory: string;\n  schema: SchemaType;\n}\n\ninterface Config {\n  generators: any[] /*Generators[]*/;\n  test?: boolean;\n}\n\nfunction normalizeFileMap(\n  map: Map<string, string>,\n  outputDir: string,\n  outMap: Map<string, string>,\n): void {\n  for (const [fileName, contents] of map) {\n    const location = path.join(outputDir, fileName);\n    outMap.set(path.normalize(location), contents);\n  }\n}\n\nfunction checkFilesForChanges(\n  map: Map<string, string>,\n  outputDir: string,\n): boolean {\n  let hasChanges = false;\n\n  const allExistingFiles = globby\n    .sync(`${outputDir}/**`)\n    .map(_ => path.normalize(_))\n    .sort();\n  const allGeneratedFiles = [...map.keys()].map(_ => path.normalize(_)).sort();\n\n  if (\n    allExistingFiles.length !== allGeneratedFiles.length ||\n    !allExistingFiles.every((val, index) => val === allGeneratedFiles[index])\n  )\n    return true;\n\n  for (const [fileName, contents] of map) {\n    if (!fs.existsSync(fileName)) {\n      hasChanges = true;\n      continue;\n    }\n\n    const currentContents = fs.readFileSync(fileName, 'utf8');\n    if (currentContents !== contents) {\n      console.log(`- ${fileName} has changed`);\n      hasChanges = true;\n      continue;\n    }\n  }\n\n  return hasChanges;\n}\n\nfunction writeMapToFiles(map: Map<string, string>, outputDir: string) {\n  let success = true;\n\n  // This ensures that we delete any generated files from modules that have been deleted\n  const allExistingFiles = globby.sync(`${outputDir}/**`);\n  allExistingFiles.forEach(existingFile => {\n    if (!map.has(path.normalize(existingFile))) {\n      fs.unlinkSync(existingFile);\n    }\n  });\n\n  for (const [fileName, contents] of map) {\n    try {\n      fs.mkdirSync(path.dirname(fileName), {recursive: true});\n\n      if (fs.existsSync(fileName)) {\n        const currentContents = fs.readFileSync(fileName, 'utf8');\n        // Don't update the files if there are no changes as this breaks incremental builds\n        if (currentContents === contents) {\n          continue;\n        }\n      }\n\n      fs.writeFileSync(fileName, contents);\n    } catch (error) {\n      success = false;\n      console.error(`Failed to write ${fileName} to ${fileName}`, error);\n    }\n  }\n\n  return success;\n}\n\nexport function parseFile(filename: string): SchemaType {\n  try {\n    const isTypeScript =\n      path.extname(filename) === '.ts' || path.extname(filename) === '.tsx';\n    const contents = fs.readFileSync(filename, 'utf8');\n    const schema = isTypeScript\n      ? TypeScriptParser.parseString(contents, filename)\n      : FlowParser.parseString(contents, filename);\n    // there will be at most one turbo module per file\n    const moduleName = Object.keys(schema.modules)[0];\n    if (moduleName) {\n      const spec = schema.modules[moduleName];\n      if (spec.type === 'NativeModule') {\n        const contents = fs.readFileSync(filename, 'utf8');\n        if (contents) {\n          // This is a temporary implementation until such information is added to the schema in facebook/react-native\n          if (contents.includes('TurboModuleRegistry.get<')) {\n            setOptionalTurboModule(spec, true);\n          } else if (contents.includes('TurboModuleRegistry.getEnforcing<')) {\n            setOptionalTurboModule(spec, false);\n          }\n        }\n      }\n    }\n    return schema;\n  } catch (e) {\n    if (e instanceof Error) {\n      e.message = `(${filename}): ${e.message}`;\n    }\n    throw e;\n  }\n}\n\nexport function combineSchemas(files: string[]): SchemaType {\n  return files.reduce(\n    (merged, filename) => {\n      const contents = fs.readFileSync(filename, 'utf8');\n      if (\n        contents &&\n        (/export\\s+default\\s+\\(?codegenNativeComponent</.test(contents) ||\n          contents.includes('extends TurboModule'))\n      ) {\n        const schema = parseFile(filename);\n        merged.modules = {...merged.modules, ...schema.modules};\n      }\n      return merged;\n    },\n    {modules: {}},\n  );\n}\n\nexport function generate(\n  {\n    libraryName,\n    methodOnly,\n    modulesCxx,\n    moduleSpecName,\n    modulesTypeScriptTypes,\n    modulesWindows,\n    namespace,\n    outputDirectory,\n    schema,\n  }: Options,\n  {/*generators,*/ test}: Config,\n): boolean {\n  schemaValidator.validate(schema);\n\n  const componentOutputdir = path.join(\n    outputDirectory,\n    'react/components',\n    libraryName,\n  );\n\n  const generatedFiles = new Map<string, string>();\n\n  generatedFiles.set(\n    path.join(outputDirectory, '.clang-format'),\n    'DisableFormat: true\\nSortIncludes: false',\n  );\n\n  const generateNM2 = createNM2Generator({\n    methodOnly,\n    namespace,\n  });\n\n  const generateJsiModuleH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/modules/GenerateModuleH',\n  )).generate;\n  const generateJsiModuleCpp = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/modules/GenerateModuleCpp',\n  )).generate;\n  const generatorPropsH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GeneratePropsH',\n  )).generate;\n  const generatorPropsCPP = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GeneratePropsCPP',\n  )).generate;\n  const generatorShadowNodeH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateShadowNodeH',\n  )).generate;\n  const generatorShadowNodeCPP = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateShadowNodeCPP',\n  )).generate;\n  const generatorComponentDescriptorH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateComponentDescriptorH',\n  )).generate;\n  const generatorEventEmitterH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateEventEmitterH',\n  )).generate;\n  const generatorEventEmitterCPP = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateEventEmitterCpp',\n  )).generate;\n  const generatorStateCPP = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateStateCpp',\n  )).generate;\n  const generatorStateH = require(path.resolve(\n    rncodegenPath,\n    'lib/generators/components/GenerateStateH',\n  )).generate;\n\n  const moduleGenerators = [];\n\n  if (modulesWindows) {\n    moduleGenerators.push(generateNM2);\n  }\n\n  if (modulesCxx) {\n    moduleGenerators.push(generateJsiModuleH);\n    moduleGenerators.push(generateJsiModuleCpp);\n  }\n\n  if (modulesTypeScriptTypes) {\n    moduleGenerators.push(generateTypeScript);\n  }\n\n  moduleGenerators.forEach(generator => {\n    const generated: Map<string, string> = generator(\n      libraryName,\n      schema,\n      moduleSpecName,\n    );\n    normalizeFileMap(generated, outputDirectory, generatedFiles);\n  });\n\n  if (\n    Object.keys(schema.modules).some(\n      moduleName => schema.modules[moduleName].type === 'Component',\n    )\n  ) {\n    const componentGenerators = [\n      generatorComponentDescriptorH,\n      generatorEventEmitterCPP,\n      generatorEventEmitterH,\n      generatorPropsCPP,\n      generatorPropsH,\n      generatorShadowNodeCPP,\n      generatorShadowNodeH,\n      generatorStateCPP,\n      generatorStateH,\n    ];\n\n    componentGenerators.forEach(generator => {\n      const generated: Map<string, string> = generator(\n        libraryName,\n        schema,\n        moduleSpecName,\n      );\n      normalizeFileMap(generated, componentOutputdir, generatedFiles);\n    });\n  }\n\n  if (test === true) {\n    return checkFilesForChanges(generatedFiles, outputDirectory);\n  }\n\n  return writeMapToFiles(generatedFiles, outputDirectory);\n}\n\nexport type CodeGenOptions = {\n  file?: string;\n  files?: string[];\n  libraryName: string;\n  methodOnly: boolean;\n  modulesCxx: boolean;\n  modulesTypeScriptTypes: boolean;\n  modulesWindows: boolean;\n  namespace: string;\n  outputDirectory: string;\n  test: boolean;\n};\n\nexport function runCodeGen(options: CodeGenOptions): boolean {\n  if (!options.file && !options.files)\n    throw new Error('Must specify file or files option');\n\n  const schema = options.file\n    ? parseFile(options.file)\n    : combineSchemas(globby.sync(options.files!));\n\n  const libraryName = options.libraryName;\n  const moduleSpecName = 'moduleSpecName';\n  const {\n    methodOnly,\n    modulesCxx,\n    modulesTypeScriptTypes,\n    modulesWindows,\n    namespace,\n    outputDirectory,\n  } = options;\n  return generate(\n    {\n      libraryName,\n      methodOnly,\n      modulesCxx,\n      moduleSpecName,\n      modulesTypeScriptTypes,\n      modulesWindows,\n      namespace,\n      outputDirectory,\n      schema,\n    },\n    {generators: [], test: options.test},\n  );\n}\n"]}