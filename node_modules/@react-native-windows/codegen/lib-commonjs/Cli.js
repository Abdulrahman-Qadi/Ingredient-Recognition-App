"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * @format
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const index_1 = require("./index");
const argv = yargs_1.default.options({
    file: {
        type: 'string',
        describe: 'file which contains spec',
    },
    files: {
        type: 'string',
        array: true,
        describe: 'glob patterns for files which contains specs',
    },
    modulesTypeScriptTypes: {
        type: 'boolean',
        describe: 'generate turbo module definition files in TypeScript',
        default: false,
    },
    modulesCxx: {
        type: 'boolean',
        describe: 'generate C++ JSI turbo module spec files',
        default: false,
    },
    modulesWindows: {
        type: 'boolean',
        describe: 'generate turbo module spec files for REACT_MODULE',
        default: false,
    },
    methodOnly: {
        type: 'boolean',
        describe: 'generate only method metadata in C++ turbo module spec',
        default: false,
    },
    outputDirectory: {
        type: 'string',
        describe: 'output directory',
        default: 'codegen',
    },
    test: {
        type: 'boolean',
        describe: 'Verify that the generated output is unchanged',
        default: false,
    },
    namespace: {
        type: 'string',
        describe: 'C++/C# Namespace to put generated native modules in',
        default: 'MyNamespace',
    },
    libraryName: {
        type: 'string',
        required: true,
        describe: 'Used for part of the path generated within the codegen dir',
    },
}).argv;
if ((argv.file && argv.files) || (!argv.file && !argv.files)) {
    console.error('You must specify either --file or --files.');
    process.exit(1);
}
(0, index_1.runCodeGen)(argv);
//# sourceMappingURL=Cli.js.map