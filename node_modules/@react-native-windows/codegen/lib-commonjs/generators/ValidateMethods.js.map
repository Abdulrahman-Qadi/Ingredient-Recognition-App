{"version":3,"file":"ValidateMethods.js","sourceRoot":"","sources":["../../src/generators/ValidateMethods.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {\n  NativeModuleFunctionTypeAnnotation,\n  NativeModulePropertyShape,\n  NativeModuleSchema,\n} from 'react-native-tscodegen';\nimport {AliasMap} from './AliasManaging';\nimport {translateArgs, translateSpecArgs} from './ParamTypes';\nimport {translateImplReturnType, translateSpecReturnType} from './ReturnTypes';\n\nfunction isMethodSync(funcType: NativeModuleFunctionTypeAnnotation) {\n  return (\n    funcType.returnTypeAnnotation.type !== 'VoidTypeAnnotation' &&\n    funcType.returnTypeAnnotation.type !== 'PromiseTypeAnnotation'\n  );\n}\n\nfunction isMethodReturnPromise(funcType: NativeModuleFunctionTypeAnnotation) {\n  return funcType.returnTypeAnnotation.type === 'PromiseTypeAnnotation';\n}\n\nfunction getPossibleMethodSignatures(\n  prop: NativeModulePropertyShape,\n  funcType: NativeModuleFunctionTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n): string[] {\n  const args = translateArgs(funcType.params, aliases, baseAliasName);\n  if (isMethodReturnPromise(funcType)) {\n    // TODO: type of the promise could be provided in the future\n    args.push('::React::ReactPromise<::React::JSValue> &&result');\n  }\n\n  // TODO: be much more exhastive on the possible method signatures that can be used..\n  const sig = `REACT_${isMethodSync(funcType) ? 'SYNC_' : ''}METHOD(${\n    prop.name\n  }) ${translateImplReturnType(\n    funcType.returnTypeAnnotation,\n    aliases,\n    baseAliasName,\n  )} ${prop.name}(${args.join(', ')}) noexcept { /* implementation */ }`;\n\n  const staticsig = `REACT_${isMethodSync(funcType) ? 'SYNC_' : ''}METHOD(${\n    prop.name\n  }) static ${translateImplReturnType(\n    funcType.returnTypeAnnotation,\n    aliases,\n    baseAliasName,\n  )} ${prop.name}(${args.join(', ')}) noexcept { /* implementation */ }`;\n\n  return [sig, staticsig];\n}\n\nfunction translatePossibleMethodSignatures(\n  prop: NativeModulePropertyShape,\n  funcType: NativeModuleFunctionTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n): string {\n  return getPossibleMethodSignatures(prop, funcType, aliases, baseAliasName)\n    .map(sig => `\"    ${sig}\\\\n\"`)\n    .join('\\n          ');\n}\n\nfunction renderProperties(\n  properties: ReadonlyArray<NativeModulePropertyShape>,\n  aliases: AliasMap,\n  tuple: boolean,\n): string {\n  // TODO: generate code for constants\n  return properties\n    .filter(prop => prop.name !== 'getConstants')\n    .map((prop, index) => {\n      // TODO: prop.optional === true\n      // TODO: prop.typeAnnotation.type === 'NullableTypeAnnotation'\n      const propAliasName = prop.name;\n      const funcType =\n        prop.typeAnnotation.type === 'NullableTypeAnnotation'\n          ? prop.typeAnnotation.typeAnnotation\n          : prop.typeAnnotation;\n\n      const traversedArgs = translateSpecArgs(\n        funcType.params,\n        aliases,\n        propAliasName,\n      );\n\n      const translatedReturnParam = translateSpecReturnType(\n        funcType.returnTypeAnnotation,\n        aliases,\n        propAliasName,\n      );\n\n      if (isMethodReturnPromise(funcType)) {\n        // TODO: type of the promise could be provided in the future\n        traversedArgs.push('Promise<::React::JSValue>');\n      }\n\n      if (tuple) {\n        return `      ${\n          isMethodSync(funcType) ? 'Sync' : ''\n        }Method<${translatedReturnParam}(${traversedArgs.join(\n          ', ',\n        )}) noexcept>{${index}, L\"${prop.name}\"},`;\n      } else {\n        return `    REACT_SHOW_METHOD_SPEC_ERRORS(\n          ${index},\n          \"${prop.name}\",\n          ${translatePossibleMethodSignatures(\n            prop,\n            funcType,\n            aliases,\n            propAliasName,\n          )});`;\n      }\n    })\n    .join('\\n');\n}\n\nexport function generateValidateMethods(\n  nativeModule: NativeModuleSchema,\n  aliases: AliasMap,\n): [string, string] {\n  const properties = nativeModule.spec.properties;\n  const traversedProperties = renderProperties(properties, aliases, false);\n  const traversedPropertyTuples = renderProperties(properties, aliases, true);\n  return [traversedPropertyTuples, traversedProperties];\n}\n"]}