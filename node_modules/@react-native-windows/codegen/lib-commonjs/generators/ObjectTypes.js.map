{"version":3,"file":"ObjectTypes.js","sourceRoot":"","sources":["../../src/generators/ObjectTypes.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAEH,YAAY,CAAC;;;AAMb,mDAIyB;AAEzB,SAAgB,cAAc,CAC5B,IAA8C,EAC9C,OAAiB,EACjB,aAAqB;IAErB,wDAAwD;IACxD,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,IAAI,EAAE;QACjB,KAAK,sBAAsB;YACzB,OAAO,aAAa,CAAC;QACvB,KAAK,sBAAsB,CAAC;QAC5B,KAAK,qBAAqB,CAAC;QAC3B,KAAK,sBAAsB;YACzB,OAAO,QAAQ,CAAC;QAClB,KAAK,qBAAqB;YACxB,OAAO,KAAK,CAAC;QACf,KAAK,uBAAuB;YAC1B,OAAO,MAAM,CAAC;QAChB,KAAK,qBAAqB;YACxB,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,OAAO,eAAe,cAAc,CAClC,IAAI,CAAC,WAAW,EAChB,OAAO,EACP,GAAG,aAAa,UAAU,CAC3B,GAAG,CAAC;aACN;iBAAM;gBACL,OAAO,uBAAuB,CAAC;aAChC;QACH,KAAK,6BAA6B;YAChC,OAAO,kBAAkB,CAAC;QAC5B,KAAK,sBAAsB;YACzB,OAAO,IAAA,wCAAwB,EAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;QAChE,KAAK,wBAAwB,CAAC,CAAC;YAC7B,wDAAwD;YACxD,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,UAAU;YACV,uEAAuE;YACvE,IAAI,IAAI,KAAK,SAAS;gBACpB,MAAM,IAAI,KAAK,CACb,8BAA8B,IAAI,yBAAyB,CAC5D,CAAC;YACJ,OAAO,QAAQ,CAAC;SACjB;QACD,KAAK,yBAAyB;YAC5B,OAAO,IAAA,+BAAe,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,KAAK,wBAAwB;YAC3B,OAAO,iBAAiB,cAAc,CACpC,IAAI,CAAC,cAAc,EACnB,OAAO,EACP,aAAa,CACd,GAAG,CAAC;QACP;YACE,MAAM,IAAI,KAAK,CAAC,0CAA0C,UAAU,EAAE,CAAC,CAAC;KAC3E;AACH,CAAC;AAtDD,wCAsDC","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {\n  NativeModuleBaseTypeAnnotation,\n  Nullable,\n} from 'react-native-tscodegen';\nimport {\n  AliasMap,\n  getAliasCppName,\n  getAnonymousAliasCppName,\n} from './AliasManaging';\n\nexport function translateField(\n  type: Nullable<NativeModuleBaseTypeAnnotation>,\n  aliases: AliasMap,\n  baseAliasName: string,\n): string {\n  // avoid: Property 'type' does not exist on type 'never'\n  const returnType = type.type;\n  switch (type.type) {\n    case 'StringTypeAnnotation':\n      return 'std::string';\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'Int32TypeAnnotation':\n      return 'int';\n    case 'BooleanTypeAnnotation':\n      return 'bool';\n    case 'ArrayTypeAnnotation':\n      if (type.elementType) {\n        return `std::vector<${translateField(\n          type.elementType,\n          aliases,\n          `${baseAliasName}_element`,\n        )}>`;\n      } else {\n        return `::React::JSValueArray`;\n      }\n    case 'GenericObjectTypeAnnotation':\n      return '::React::JSValue';\n    case 'ObjectTypeAnnotation':\n      return getAnonymousAliasCppName(aliases, baseAliasName, type);\n    case 'ReservedTypeAnnotation': {\n      // avoid: Property 'name' does not exist on type 'never'\n      const name = type.name;\n      // (#6597)\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (name !== 'RootTag')\n        throw new Error(\n          `Unknown reserved function: ${name} in translateReturnType`,\n        );\n      return 'double';\n    }\n    case 'TypeAliasTypeAnnotation':\n      return getAliasCppName(type.name);\n    case 'NullableTypeAnnotation':\n      return `std::optional<${translateField(\n        type.typeAnnotation,\n        aliases,\n        baseAliasName,\n      )}>`;\n    default:\n      throw new Error(`Unhandled type in translateReturnType: ${returnType}`);\n  }\n}\n"]}