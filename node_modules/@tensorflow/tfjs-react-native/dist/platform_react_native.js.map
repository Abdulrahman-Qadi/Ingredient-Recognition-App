{"version":3,"file":"platform_react_native.js","sourceRoot":"","sources":["../src/platform_react_native.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '@tensorflow/tfjs-backend-cpu';\nimport {GPGPUContext, MathBackendWebGL, setWebGLContext} from '@tensorflow/tfjs-backend-webgl';\nimport * as tf from '@tensorflow/tfjs-core';\nimport {Platform} from '@tensorflow/tfjs-core';\nimport {Buffer} from 'buffer';\nimport {GLView} from 'expo-gl';\nimport {Platform as RNPlatform} from 'react-native';\n\n// See implemetation note on fetch\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L421\nfunction parseHeaders(rawHeaders: string) {\n  const headers = new Headers();\n  // Replace instances of \\r\\n and \\n followed by at least one space or\n  // horizontal tab with a space https://tools.ietf.org/html/rfc7230#section-3.2\n  const preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n  preProcessedHeaders.split(/\\r?\\n/).forEach(line => {\n    const parts = line.split(':');\n    const key = parts.shift().trim();\n    if (key) {\n      const value = parts.join(':').trim();\n      headers.append(key, value);\n    }\n  });\n  return headers;\n}\n\n// Implementation note: This is a patch of react-native's fetch implementation\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/0ee5f68929610106ee6864baa04ea90be0fc5160/Libraries/vendor/core/whatwg-fetch.js#L484\n//\n// The response object supplied by fetch does not implement arrayBuffer()\n// FileReader.readAsArrayBuffer is not implemented.\n// tslint:disable-next-line:max-line-length\n// https://github.com/facebook/react-native/blob/d7a5e3e215eedb7377a86f172e0619403e20c2b8/Libraries/Blob/FileReader.js#L83\n//\n// However if one uses XMLHttpRequest directly and set the responseType\n// correctly before making the request. The returned response object will have\n// a working arrayBuffer method that can be used downstraeam.\n\n/**\n * Makes an HTTP request.\n * @param path The URL path to make a request to\n * @param init The request init. See init here:\n *     https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n * @param options A RequestDetails object.\n *    - __options.isBinary__ boolean indicating whether this request is for a\n *     binary file.\n *\n * @doc {heading: 'Platform helpers', subheading: 'http'}\n */\nexport async function fetch(\n    path: string, init?: RequestInit,\n    options?: tf.io.RequestDetails): Promise<Response> {\n  return new Promise((resolve, reject) => {\n    const request = new Request(path, init);\n    const xhr = new XMLHttpRequest();\n\n    xhr.onload = () => {\n      const reqOptions = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || ''),\n        url: '',\n      };\n      reqOptions.url = 'responseURL' in xhr ?\n          xhr.responseURL :\n          reqOptions.headers.get('X-Request-URL');\n\n      //@ts-ignore â€” ts belives the latter case will never occur.\n      const body = 'response' in xhr ? xhr.response : xhr.responseText;\n\n      resolve(new Response(body, reqOptions));\n    };\n\n    xhr.onerror = () => reject(new TypeError('Network request failed'));\n    xhr.ontimeout = () => reject(new TypeError('Network request failed'));\n\n    xhr.open(request.method, request.url, true);\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true;\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false;\n    }\n\n    if (options != null && options.isBinary) {\n      // In react native We need to set the response type to arraybuffer when\n      // fetching binary resources in order for `.arrayBuffer` to work correctly\n      // on the response.\n      xhr.responseType = 'arraybuffer';\n    }\n\n    request.headers.forEach((value: string, name: string) => {\n      xhr.setRequestHeader(name, value);\n    });\n\n    xhr.send(\n        //@ts-ignore\n        typeof request._bodyInit === 'undefined' ? null : request._bodyInit,\n    );\n  });\n}\n\nexport class PlatformReactNative implements Platform {\n  /**\n   * Makes an HTTP request.\n   *\n   * see @fetch docs above.\n   */\n  async fetch(\n      path: string, init?: RequestInit, options?: tf.io.RequestDetails) {\n    return fetch(path, init, options);\n  }\n\n  /**\n   * Encode the provided string into an array of bytes using the provided\n   * encoding.\n   */\n  encode(text: string, encoding: string): Uint8Array {\n    // See https://www.w3.org/TR/encoding/#utf-16le\n    if (encoding === 'utf-16') {\n      encoding = 'utf16le';\n    }\n    return new Uint8Array(Buffer.from(text, encoding as BufferEncoding));\n  }\n  /** Decode the provided bytes into a string using the provided encoding. */\n  decode(bytes: Uint8Array, encoding: string): string {\n    // See https://www.w3.org/TR/encoding/#utf-16le\n    if (encoding === 'utf-16') {\n      encoding = 'utf16le';\n    }\n    return Buffer.from(bytes).toString(encoding as BufferEncoding);\n  }\n\n  now(): number {\n    //@ts-ignore\n    if (global.nativePerformanceNow) {\n      //@ts-ignore\n      return global.nativePerformanceNow();\n    }\n    return Date.now();\n  }\n}\n\nfunction setupGlobals() {\n  global.Buffer = Buffer;\n}\n\nfunction registerWebGLBackend() {\n  try {\n    const PRIORITY = 5;\n    tf.registerBackend('rn-webgl', async () => {\n      const glContext = await GLView.createContextAsync();\n\n      // ExpoGl getBufferSubData is not implemented yet (throws an exception).\n      tf.env().set('WEBGL_BUFFER_SUPPORTED', false);\n\n      //\n      // Mock extension support for EXT_color_buffer_float and\n      // EXT_color_buffer_half_float on the expo-gl context object.\n      // In react native we do not have to get a handle to the extension\n      // in order to use the functionality of that extension on the device.\n      //\n      // This code block makes iOS and Android devices pass the extension checks\n      // used in core. After those are done core will actually test whether\n      // we can render/download float or half float textures.\n      //\n      // We can remove this block once we upstream checking for these\n      // extensions in expo.\n      //\n      // TODO look into adding support for checking these extensions in expo-gl\n      //\n      //@ts-ignore\n      const getExt = glContext.getExtension.bind(glContext);\n      const shimGetExt = (name: string) => {\n        if (name === 'EXT_color_buffer_float') {\n          if (RNPlatform.OS === 'ios') {\n            // iOS does not support EXT_color_buffer_float\n            return null;\n          } else {\n            return {};\n          }\n        }\n\n        if (name === 'EXT_color_buffer_half_float') {\n          return {};\n        }\n        return getExt(name);\n      };\n\n      //\n      // Manually make 'read' synchronous. glContext has a defined gl.fenceSync\n      // function that throws a \"Not implemented yet\" exception so core\n      // cannot properly detect that it is not supported. We mock\n      // implementations of gl.fenceSync and gl.clientWaitSync\n      // TODO remove once fenceSync and clientWaitSync is implemented upstream.\n      //\n      const shimFenceSync = () => {\n        return {};\n      };\n      const shimClientWaitSync = () => glContext.CONDITION_SATISFIED;\n\n      // @ts-ignore\n      glContext.getExtension = shimGetExt.bind(glContext);\n      glContext.fenceSync = shimFenceSync.bind(glContext);\n      glContext.clientWaitSync = shimClientWaitSync.bind(glContext);\n\n      // Set the WebGLContext before flag evaluation\n      setWebGLContext(2, glContext);\n      const context = new GPGPUContext();\n      const backend = new MathBackendWebGL(context);\n\n      return backend;\n    }, PRIORITY);\n\n    // Register all the webgl kernels on the rn-webgl backend\n    // TODO: Use tf.copyRegisteredKernels once synced to tfjs-core 2.5.0.\n    // tf.copyRegisteredKernels('webgl', 'rn-webgl');\n    const kernels = tf.getKernelsForBackend('webgl');\n    kernels.forEach(kernelConfig => {\n      const newKernelConfig =\n          Object.assign({}, kernelConfig, {backendName: 'rn-webgl'});\n      tf.registerKernel(newKernelConfig);\n    });\n  } catch (e) {\n    throw (new Error(`Failed to register Webgl backend: ${e.message}`));\n  }\n}\n\ntf.env().registerFlag(\n    'IS_REACT_NATIVE', () => navigator && navigator.product === 'ReactNative');\n\nif (tf.env().getBool('IS_REACT_NATIVE')) {\n  setupGlobals();\n  registerWebGLBackend();\n  tf.setPlatform('react-native', new PlatformReactNative());\n}\n"]}