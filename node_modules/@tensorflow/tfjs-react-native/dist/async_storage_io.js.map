{"version":3,"file":"async_storage_io.js","sourceRoot":"","sources":["../src/async_storage_io.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AsyncStorageStatic} from '@react-native-async-storage/async-storage';\nimport {io} from '@tensorflow/tfjs-core';\nimport {fromByteArray, toByteArray} from 'base64-js';\n\ntype StorageKeys = {\n  info: string,\n  modelArtifactsWithoutWeights: string,\n  weightData: string,\n};\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_SUFFIX = 'model_without_weight';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\n\nfunction getModelKeys(path: string): StorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    modelArtifactsWithoutWeights:\n        [PATH_PREFIX, path, MODEL_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n  };\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nfunction getModelArtifactsInfoForJSON(modelArtifacts: io.ModelArtifacts):\n    io.ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    // TODO followup on removing this from the the interface\n    modelTopologyType: 'JSON',\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\nclass AsyncStorageHandler implements io.IOHandler {\n  protected readonly keys: StorageKeys;\n  protected asyncStorage: AsyncStorageStatic;\n\n  constructor(protected readonly modelPath: string) {\n    if (modelPath == null || !modelPath) {\n      throw new Error('modelPath must not be null, undefined or empty.');\n    }\n    this.keys = getModelKeys(this.modelPath);\n\n    // We import this dynamically because it binds to a native library that\n    // needs to be installed by the user if they use this handler. We don't\n    // want users who are not using AsyncStorage to have to install this\n    // library.\n    this.asyncStorage =\n        // tslint:disable-next-line:no-require-imports\n        require('@react-native-async-storage/async-storage').default;\n  }\n\n  /**\n   * Save model artifacts to AsyncStorage\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: io.ModelArtifacts): Promise<io.SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'AsyncStorageHandler.save() does not support saving model topology ' +\n          'in binary format.');\n    } else {\n      // We save three items separately for each model,\n      // a ModelArtifactsInfo, a ModelArtifacts without weights\n      // and the model weights.\n      const modelArtifactsInfo: io.ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n      const {weightData, ...modelArtifactsWithoutWeights} = modelArtifacts;\n\n      try {\n        this.asyncStorage.setItem(\n            this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.asyncStorage.setItem(\n            this.keys.modelArtifactsWithoutWeights,\n            JSON.stringify(modelArtifactsWithoutWeights));\n        this.asyncStorage.setItem(\n            this.keys.weightData, fromByteArray(new Uint8Array(weightData)));\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        this.asyncStorage.removeItem(this.keys.info);\n        this.asyncStorage.removeItem(this.keys.weightData);\n        this.asyncStorage.removeItem(this.keys.modelArtifactsWithoutWeights);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to AsyncStorage.\n            Error info ${err}`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<io.ModelArtifacts> {\n    const info = JSON.parse(await this.asyncStorage.getItem(this.keys.info)) as\n        io.ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const modelArtifacts: io.ModelArtifacts =\n        JSON.parse(await this.asyncStorage.getItem(\n            this.keys.modelArtifactsWithoutWeights));\n\n    // Load weight data.\n    const weightDataBase64 =\n        await this.asyncStorage.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    modelArtifacts.weightData = toByteArray(weightDataBase64).buffer;\n\n    return modelArtifacts;\n  }\n}\n\n/**\n * Factory function for AsyncStorage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, three items are saved to async storage.\n *   - `tensorflowjs_models/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `tensorflowjs_models/${modelPath}/model_without_weight`: The topology,\n *     weights_specs and all other information about the model except for the\n *     weights.\n *   - `tensorflowjs_models/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * ```js\n *  async function asyncStorageExample() {\n *    // Define a model\n *    const model = tf.sequential();\n *    model.add(tf.layers.dense({units: 5, inputShape: [1]}));\n *    model.add(tf.layers.dense({units: 1}));\n *    model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n *\n *    // Save the model to async storage\n *    await model.save(asyncStorageIO('custom-model-test'));\n *    // Load the model from async storage\n *    await tf.loadLayersModel(asyncStorageIO('custom-model-test'));\n * }\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`\n *\n * @doc {heading: 'Models', subheading: 'IOHandlers'}\n */\nexport function asyncStorageIO(modelPath: string): io.IOHandler {\n  return new AsyncStorageHandler(modelPath);\n}\n"]}