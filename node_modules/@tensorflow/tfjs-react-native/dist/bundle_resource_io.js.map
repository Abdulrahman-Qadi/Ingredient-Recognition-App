{"version":3,"file":"bundle_resource_io.js","sourceRoot":"","sources":["../src/bundle_resource_io.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {io, util} from '@tensorflow/tfjs-core';\nimport {Asset} from 'expo-asset';\nimport {Platform} from 'react-native';\n\nimport {fetch} from './platform_react_native';\n\nclass BundleResourceHandler implements io.IOHandler {\n  constructor(\n      protected readonly modelJson: io.ModelJSON,\n      protected readonly modelWeightsId: Array<string|number>) {\n    if (modelJson == null || modelWeightsId == null) {\n      throw new Error(\n          'Must pass the model json object and the model weights path.');\n    }\n  }\n\n  /**\n   * Save model artifacts. This IO handler cannot support writing to the\n   * packaged bundle at runtime and is exclusively for loading a model\n   * that is already packages with the app.\n   */\n  async save(): Promise<io.SaveResult> {\n    throw new Error(\n        'Bundle resource IO handler does not support saving. ' +\n        'Consider using asyncStorageIO instead');\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<io.ModelArtifacts> {\n    const weightsAssets = this.modelWeightsId.map(id => Asset.fromModule(id));\n    if (weightsAssets[0].uri.match('^http')) {\n      // In debug/dev mode RN will serve these assets over HTTP\n      return this.loadViaHttp(weightsAssets);\n    } else {\n      // In release mode the assets will be on the file system.\n      return this.loadLocalAsset(weightsAssets);\n    }\n  }\n\n  async loadViaHttp(weightsAssets: Asset[]): Promise<io.ModelArtifacts> {\n    const modelJson = this.modelJson;\n    const modelArtifacts: io.ModelArtifacts = Object.assign({}, modelJson);\n    modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n    //@ts-ignore\n    delete modelArtifacts.weightManifest;\n\n    // Load the weights\n    const weightsDataArray =\n        await Promise.all(weightsAssets.map(async (weightAsset) => {\n          const url = weightAsset.uri;\n          const requestInit: undefined = undefined;\n          const response = await fetch(url, requestInit, {isBinary: true});\n          const weightData = await response.arrayBuffer();\n          return weightData;\n        }));\n\n    modelArtifacts.weightData = io.concatenateArrayBuffers(weightsDataArray);\n    return modelArtifacts;\n  }\n\n  async loadLocalAsset(weightsAssets: Asset[]): Promise<io.ModelArtifacts> {\n    // Use a dynamic import here because react-native-fs is not compatible\n    // with managed expo workflow. However the managed expo workflow should\n    // never hit this code path.\n\n    // tslint:disable-next-line: no-require-imports\n    const RNFS = require('react-native-fs');\n\n    const modelJson = this.modelJson;\n    const modelArtifacts: io.ModelArtifacts = Object.assign({}, modelJson);\n    modelArtifacts.weightSpecs = modelJson.weightsManifest[0].weights;\n    //@ts-ignore\n    delete modelArtifacts.weightManifest;\n\n    // Load the weights\n    const weightsDataArray =\n        await Promise.all(weightsAssets.map(async (weightsAsset) => {\n          let base64Weights: string;\n          if (Platform.OS === 'android') {\n            // On android we get a resource id instead of a regular path. We\n            // need to load the weights from the res/raw folder using this id.\n            const fileName = `${weightsAsset.uri}.${weightsAsset.type}`;\n            try {\n              base64Weights = await RNFS.readFileRes(fileName, 'base64');\n            } catch (e) {\n              throw new Error(\n                  `Error reading resource ${fileName}. Make sure the file is\n            in located in the res/raw folder of the bundle`,\n              );\n            }\n          } else {\n            try {\n              base64Weights = await RNFS.readFile(weightsAsset.uri, 'base64');\n            } catch (e) {\n              throw new Error(\n                  `Error reading resource ${weightsAsset.uri}.`,\n              );\n            }\n          }\n\n          const weightData = util.encodeString(base64Weights, 'base64').buffer;\n          return weightData;\n        }));\n\n    modelArtifacts.weightData = io.concatenateArrayBuffers(weightsDataArray);\n    return modelArtifacts;\n  }\n}\n\n/**\n * Factory function for BundleResource IOHandler.\n *\n * This `IOHandler` only supports `load`. It is designed to support\n * loading models that have been statically bundled (at compile time)\n * with an app.\n *\n * This IOHandler is not compatible with managed expo apps.\n *\n * ```js\n *  const modelJson = require('../path/to/model.json');\n *  const modelWeights = require('../path/to/model_weights.bin');\n *  async function bundleResourceIOExample() {\n *    const model =\n *      await tf.loadLayersModel(bundleResourceIO(modelJson, modelWeights));\n *\n *     const res = model.predict(tf.randomNormal([1, 28, 28, 1])) as tf.Tensor;\n *  }\n * ```\n *\n * @param modelJson The JSON object for the serialized model.\n * @param modelWeightsId Identifier(s) for the model's weights files. This is\n * generally a resourceId or a path to the resource in the app package.\n * This is typically obtained with a `require` statement. Can also be an array\n * of such ids if the model has multiple shards.\n *\n * See\n * facebook.github.io/react-native/docs/images#static-non-image-resources\n * for more details on how to include static resources into your react-native\n * app including how to configure `metro` to bundle `.bin` files.\n *\n * @returns An instance of `IOHandler`\n *\n * @doc {heading: 'Models', subheading: 'IOHandlers'}\n */\nexport function bundleResourceIO(\n    modelJson: io.ModelJSON, modelWeightsId: number|number[]): io.IOHandler {\n  if (typeof modelJson !== 'object') {\n    throw new Error(\n        'modelJson must be a JavaScript object (and not a string).\\n' +\n        'Have you wrapped yor asset path in a require() statment?');\n  }\n\n  if (typeof modelWeightsId === 'string') {\n    throw new Error(\n        'modelWeightsID must be a number or number array.\\n' +\n        'Have you wrapped yor asset paths in a require() statements?');\n  }\n  const modelWeightsIdArr =\n      Array.isArray(modelWeightsId) ? modelWeightsId : [modelWeightsId];\n  return new BundleResourceHandler(modelJson, modelWeightsIdArr);\n}\n"]}