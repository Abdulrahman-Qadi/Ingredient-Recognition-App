{"version":3,"file":"camera_test.js","sourceRoot":"","sources":["../../src/camera/camera_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {test_util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport {describeWithFlags} from '@tensorflow/tfjs-core/dist/jasmine_util';\nimport {ExpoWebGLRenderingContext, GLView} from 'expo-gl';\n\nimport {RN_ENVS} from '../test_env_registry';\n\nimport {detectGLCapabilities, fromTexture, toTexture} from './camera';\n\nasync function createGLContext(): Promise<ExpoWebGLRenderingContext> {\n  return GLView.createContextAsync();\n}\n\nconst expectArraysEqual = test_util.expectArraysEqual;\n\nlet gl: ExpoWebGLRenderingContext;\n\ndescribeWithFlags('toTexture', RN_ENVS, () => {\n  beforeAll(async () => {\n    if (gl == null) {\n      gl = await createGLContext();\n    }\n  });\n\n  it('should not throw', async () => {\n    const height = 2;\n    const width = 2;\n    const depth = 4;\n\n    const inTensor: tf.Tensor3D =\n        tf.truncatedNormal([height, width, depth], 127, 40, 'int32');\n\n    let texture: WebGLTexture;\n    expect(async () => {\n      texture = await toTexture(gl, inTensor);\n    }).not.toThrow();\n\n    expect(texture instanceof WebGLTexture);\n  });\n\n  it('should roundtrip succesfully', async () => {\n    const height = 2;\n    const width = 2;\n    const depth = 4;\n\n    const inTensor: tf.Tensor3D =\n        tf.truncatedNormal([height, width, depth], 127, 40, 'int32');\n    const texture = await toTexture(gl, inTensor);\n\n    const outTensor = fromTexture(\n        gl, texture, {width, height, depth}, {width, height, depth}, true);\n\n    expectArraysEqual(await inTensor.data(), await outTensor.data());\n    expectArraysEqual(inTensor.shape, outTensor.shape);\n  });\n\n  it('throws if tensor is not int32 dtype', async () => {\n    const height = 2;\n    const width = 2;\n    const depth = 4;\n\n    const floatInput: tf.Tensor3D =\n        tf.truncatedNormal([height, width, depth], 127, 40, 'float32');\n\n    expectAsync(toTexture(gl, floatInput)).toBeRejected();\n  });\n\n  it('throws if tensor is not a tensor3d dtype', async () => {\n    const batch = 2;\n    const height = 2;\n    const width = 2;\n    const depth = 4;\n\n    const oneDInput: tf.Tensor1D =\n        tf.truncatedNormal([height], 127, 40, 'int32');\n    //@ts-ignore\n    expectAsync(toTexture(gl, oneDInput)).toBeRejected();\n\n    const twoDInput: tf.Tensor2D =\n        tf.truncatedNormal([height, width], 127, 40, 'int32');\n    //@ts-ignore\n    expectAsync(toTexture(gl, twoDInput)).toBeRejected();\n\n    const fourDInput: tf.Tensor4D =\n        tf.truncatedNormal([batch, height, width, depth], 127, 40, 'int32');\n    //@ts-ignore\n    expectAsync(toTexture(gl, fourDInput)).toBeRejected();\n  });\n});\n\ndescribeWithFlags('fromTexture:nearestNeighbor', RN_ENVS, () => {\n  let texture: WebGLTexture;\n  let input: tf.Tensor3D;\n  const inShape: [number, number, number] = [4, 4, 4];\n\n  beforeAll(async () => {\n    if (gl == null) {\n      gl = await createGLContext();\n    }\n\n    input = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [190, 191, 192, 255],\n            [180, 181, 182, 255],\n            [170, 171, 172, 255],\n          ],\n          [\n            [160, 161, 162, 255],\n            [150, 151, 152, 255],\n            [140, 141, 142, 255],\n            [130, 131, 132, 255],\n          ],\n          [\n            [120, 121, 122, 255],\n            [110, 111, 112, 255],\n            [100, 101, 102, 255],\n            [90, 91, 92, 255],\n          ],\n          [\n            [80, 81, 82, 255],\n            [70, 71, 72, 255],\n            [60, 61, 62, 255],\n            [50, 51, 52, 255],\n          ]\n        ],\n        inShape, 'int32');\n  });\n\n  beforeEach(async () => {\n    texture = await toTexture(gl, input);\n  });\n\n  afterAll(() => {\n    tf.dispose(input);\n  });\n\n  it('same size alignCorners=false', async () => {\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        true,\n        {\n          alignCorners: false,\n          interpolation: 'nearest_neighbor',\n        },\n    );\n\n    expectArraysEqual(await output.data(), await input.data());\n    expectArraysEqual(output.shape, input.shape);\n  });\n\n  it('same size, alignCorners=true', async () => {\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        true,\n        {\n          alignCorners: true,\n          interpolation: 'nearest_neighbor',\n        },\n    );\n\n    expectArraysEqual(await output.data(), await input.data());\n    expectArraysEqual(output.shape, input.shape);\n  });\n\n  it('smaller, resizeNearestNeighbor, same aspect ratio, alignCorners=false',\n     async () => {\n       const expectedShape: [number, number, number] = [2, 2, 4];\n       const expected = tf.tensor3d(\n           [\n             [\n               [200, 201, 202, 255],\n               [180, 181, 182, 255],\n             ],\n             [\n               [120, 121, 122, 255],\n               [100, 101, 102, 255],\n             ]\n           ],\n           expectedShape, 'int32');\n\n       const output = fromTexture(\n           gl,\n           texture,\n           {\n             height: inShape[0],\n             width: inShape[1],\n             depth: inShape[2],\n           },\n           {\n             height: expectedShape[0],\n             width: expectedShape[1],\n             depth: expectedShape[2],\n           },\n           true,\n           {alignCorners: false, interpolation: 'nearest_neighbor'},\n       );\n\n       expectArraysEqual(await output.data(), await expected.data());\n       expectArraysEqual(output.shape, expected.shape);\n     });\n\n  it('smaller, resizeNearestNeighbor, same aspect ratio, alignCorners=true',\n     async () => {\n       const expectedShape: [number, number, number] = [2, 2, 4];\n       const expected = tf.tensor3d(\n           [\n             [\n               [200, 201, 202, 255],\n               [170, 171, 172, 255],\n             ],\n             [\n               [80, 81, 82, 255],\n               [50, 51, 52, 255],\n             ]\n           ],\n           expectedShape, 'int32');\n\n       const output = fromTexture(\n           gl,\n           texture,\n           {\n             height: inShape[0],\n             width: inShape[1],\n             depth: inShape[2],\n           },\n           {\n             height: expectedShape[0],\n             width: expectedShape[1],\n             depth: expectedShape[2],\n           },\n           true,\n           {alignCorners: true, interpolation: 'nearest_neighbor'},\n       );\n\n       expectArraysEqual(await output.data(), await expected.data());\n       expectArraysEqual(output.shape, expected.shape);\n     });\n\n  it('smaller, resizeNearestNeighbor, wider, alignCorners=false', async () => {\n    const expectedShape: [number, number, number] = [2, 3, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [190, 191, 192, 255],\n            [180, 181, 182, 255],\n          ],\n          [\n            [120, 121, 122, 255],\n            [110, 111, 112, 255],\n            [100, 101, 102, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: false, interpolation: 'nearest_neighbor'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('smaller, resizeNearestNeighbor, wider, alignCorners=true', async () => {\n    const expectedShape: [number, number, number] = [2, 3, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [180, 181, 182, 255],\n            [170, 171, 172, 255],\n          ],\n\n          [\n            [80, 81, 82, 255],\n            [60, 61, 62, 255],\n            [50, 51, 52, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: true, interpolation: 'nearest_neighbor'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('same size, should drop alpha channel', async () => {\n    await detectGLCapabilities(gl);\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202],\n            [190, 191, 192],\n            [180, 181, 182],\n            [170, 171, 172],\n          ],\n          [\n            [160, 161, 162],\n            [150, 151, 152],\n            [140, 141, 142],\n            [130, 131, 132],\n          ],\n          [\n            [120, 121, 122],\n            [110, 111, 112],\n            [100, 101, 102],\n            [90, 91, 92],\n          ],\n          [\n            [80, 81, 82],\n            [70, 71, 72],\n            [60, 61, 62],\n            [50, 51, 52],\n          ]\n        ],\n        [inShape[0], inShape[1], 3], 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: 3,\n        },\n        true,\n        {\n          alignCorners: true,\n          interpolation: 'nearest_neighbor',\n        },\n    );\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n});\n\ndescribeWithFlags('fromTexture:bilinear', RN_ENVS, () => {\n  let texture: WebGLTexture;\n  let input: tf.Tensor3D;\n  const inShape: [number, number, number] = [4, 4, 4];\n\n  beforeAll(async () => {\n    if (gl == null) {\n      gl = await createGLContext();\n    }\n\n    input = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [190, 191, 192, 255],\n            [180, 181, 182, 255],\n            [170, 171, 172, 255],\n          ],\n          [\n            [160, 161, 162, 255],\n            [150, 151, 152, 255],\n            [140, 141, 142, 255],\n            [130, 131, 132, 255],\n          ],\n          [\n            [120, 121, 122, 255],\n            [110, 111, 112, 255],\n            [100, 101, 102, 255],\n            [90, 91, 92, 255],\n          ],\n          [\n            [80, 81, 82, 255],\n            [70, 71, 72, 255],\n            [60, 61, 62, 255],\n            [50, 51, 52, 255],\n          ]\n        ],\n        inShape, 'int32');\n  });\n\n  afterAll(() => {\n    tf.dispose(input);\n  });\n\n  beforeEach(async () => {\n    texture = await toTexture(gl, input);\n  });\n\n  it('same size alignCorners=false', async () => {\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        true,\n        {\n          alignCorners: false,\n          interpolation: 'bilinear',\n        },\n    );\n\n    expectArraysEqual(await output.data(), await input.data());\n    expectArraysEqual(output.shape, input.shape);\n  });\n\n  it('same size, alignCorners=true', async () => {\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        true,\n        {\n          alignCorners: true,\n          interpolation: 'bilinear',\n        },\n    );\n\n    expectArraysEqual(await output.data(), await input.data());\n    expectArraysEqual(output.shape, input.shape);\n  });\n\n  it('smaller, same aspect ratio, alignCorners=false', async () => {\n    const expectedShape: [number, number, number] = [2, 2, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [180, 181, 182, 255],\n          ],\n          [\n            [120, 121, 122, 255],\n            [100, 101, 102, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: false, interpolation: 'bilinear'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('smaller, same aspect ratio, alignCorners=true', async () => {\n    const expectedShape: [number, number, number] = [2, 2, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [170, 171, 172, 255],\n          ],\n          [\n            [80, 81, 82, 255],\n            [50, 51, 52, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: true, interpolation: 'bilinear'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('smaller, wider, alignCorners=false', async () => {\n    const expectedShape: [number, number, number] = [2, 3, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [187, 188, 189, 255],\n            [173, 174, 175, 255],\n          ],\n          [\n            [120, 121, 122, 255],\n            [107, 108, 109, 255],\n            [93, 94, 95, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: false, interpolation: 'bilinear'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('smaller, wider, alignCorners=true', async () => {\n    const expectedShape: [number, number, number] = [2, 3, 4];\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202, 255],\n            [185, 186, 187, 255],\n            [170, 171, 172, 255],\n          ],\n          [\n            [80, 81, 82, 255],\n            [65, 66, 67, 255],\n            [50, 51, 52, 255],\n          ]\n        ],\n        expectedShape, 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: expectedShape[0],\n          width: expectedShape[1],\n          depth: expectedShape[2],\n        },\n        true,\n        {alignCorners: true, interpolation: 'bilinear'},\n    );\n\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n\n  it('same size, should drop alpha channel', async () => {\n    await detectGLCapabilities(gl);\n    const expected = tf.tensor3d(\n        [\n          [\n            [200, 201, 202],\n            [190, 191, 192],\n            [180, 181, 182],\n            [170, 171, 172],\n          ],\n          [\n            [160, 161, 162],\n            [150, 151, 152],\n            [140, 141, 142],\n            [130, 131, 132],\n          ],\n          [\n            [120, 121, 122],\n            [110, 111, 112],\n            [100, 101, 102],\n            [90, 91, 92],\n          ],\n          [\n            [80, 81, 82],\n            [70, 71, 72],\n            [60, 61, 62],\n            [50, 51, 52],\n          ]\n        ],\n        [inShape[0], inShape[1], 3], 'int32');\n\n    const output = fromTexture(\n        gl,\n        texture,\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: inShape[2],\n        },\n        {\n          height: inShape[0],\n          width: inShape[1],\n          depth: 3,\n        },\n        true,\n        {\n          alignCorners: true,\n          interpolation: 'bilinear',\n        },\n    );\n    expectArraysEqual(await output.data(), await expected.data());\n    expectArraysEqual(output.shape, expected.shape);\n  });\n});\n"]}