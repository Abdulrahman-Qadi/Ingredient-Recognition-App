{"version":3,"file":"resize_bilinear_program_info.js","sourceRoot":"","sources":["../../src/camera/resize_bilinear_program_info.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAUH,MAAM,UAAU,kBAAkB;IAChC,OAAO;;;;;;;;;;;EAWP,CAAC;AACH,CAAC;AAED,MAAM,UAAU,oBAAoB,CAChC,UAAsB,EAAE,UAAsB,EAAE,YAAqB;IACvE,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;IAChC,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;IAClC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC;IAChC,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;IAElC,MAAM,eAAe,GAAqB;QACxC,CAAC,YAAY,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM;QAClD,CAAC,YAAY,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;KACtD,CAAC;IAEF,MAAM,gBAAgB,GAAqB;QACzC,CAAC,YAAY,IAAI,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM;QAClD,CAAC,YAAY,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;KACtD,CAAC;IAEF,MAAM,cAAc,GAAG,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAChE,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;QAC5C,2CAA2C,CAAC,CAAC;QAC7C,WAAW,CAAC;IAEhB,MAAM,MAAM,GAAG;;;;;MAKX,cAAc;;yBAEK,MAAM,KAAK,OAAO;yBAClB,MAAM,KAAK,OAAO;;;MAGrC,eAAe,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;MACxC,eAAe,CAAC,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;gBA0B9B,eAAe;;CAE9B,CAAC;IAEA,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,QAAQ;IACtB,OAAO,IAAI,YAAY,CAAC;QACtB,mBAAmB;QACnB,CAAC,CAAC,EAAE,CAAC,CAAC;QACN,CAAC,CAAC,EAAE,CAAC;QACL,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,CAAC,EAAE,CAAC,CAAC;QACN,CAAC,EAAE,CAAC,CAAC;KAEN,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,SAAS;IACvB,OAAO,IAAI,YAAY,CAAC;QACtB,mBAAmB;QACnB,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;KAEL,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\ninterface Dimensions {\n  x?: number;\n  y?: number;\n  width: number;\n  height: number;\n  depth: number;\n}\n\nexport function vertexShaderSource() {\n  return `#version 300 es\nprecision highp float;\nprecision highp int;\n\nin vec2 position;\nin vec2 texCoords;\nout vec2 uv;\n\nvoid main() {\n  uv = texCoords;\n  gl_Position = vec4(position, 0, 1);\n}`;\n}\n\nexport function fragmentShaderSource(\n    sourceDims: Dimensions, targetDims: Dimensions, alignCorners: boolean) {\n  const sWidth = sourceDims.width;\n  const sHeight = sourceDims.height;\n  const tWidth = targetDims.width;\n  const tHeight = targetDims.height;\n\n  const effectiveInSize: [number, number] = [\n    (alignCorners && tWidth > 1) ? sWidth - 1 : sWidth,\n    (alignCorners && tHeight > 1) ? sHeight - 1 : sHeight,\n  ];\n\n  const effectiveOutSize: [number, number] = [\n    (alignCorners && tWidth > 1) ? tWidth - 1 : tWidth,\n    (alignCorners && tHeight > 1) ? tHeight - 1 : tHeight,\n  ];\n\n  const outputFragType = targetDims.depth === 3 ? 'vec3' : 'vec4';\n  const outputFragColor = targetDims.depth === 3 ?\n      'vec3(texSample.r,texSample.g,texSample.b)' :\n      'texSample';\n\n  const source = `#version 300 es\nprecision highp float;\n\nuniform sampler2D inputTexture;\nin vec2 uv;\nout ${outputFragType} fragColor;\n\nvec2 sourceDims = vec2(${sWidth}, ${sHeight});\nvec2 targetDims = vec2(${tWidth}, ${tHeight});\n\nconst vec2 inputToOutputRatio = vec2(\n    ${effectiveInSize[0] / effectiveOutSize[0]},\n    ${effectiveInSize[1] / effectiveOutSize[1]});\n\nvoid main() {\n  ivec2 targetCoords = ivec2(uv * targetDims);\n\n  vec2 sourceCoords = vec2(targetCoords) * inputToOutputRatio;\n\n  ivec2 sourceFloor = ivec2(sourceCoords);\n  ivec2 sourceCeil = ivec2(min(sourceDims - 1.0, ceil(sourceCoords)));\n\n  vec4 topLeft = texelFetch(inputTexture,\n    ivec2(sourceFloor.x, sourceFloor.y), 0);\n  vec4 bottomLeft = texelFetch(inputTexture,\n    ivec2(sourceCeil.x, sourceFloor.y), 0);\n  vec4 topRight = texelFetch(inputTexture,\n    ivec2(sourceFloor.x, sourceCeil.y), 0);\n  vec4 bottomRight = texelFetch(inputTexture,\n    ivec2(sourceCeil.x, sourceCeil.y), 0);\n\n  vec2 fracRC = sourceCoords - vec2(sourceFloor);\n\n  vec4 top = topLeft + (topRight - topLeft) * fracRC.y;\n  vec4 bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n  vec4 newValue = top + (bottom - top) * fracRC.x;\n\n  vec4 texSample = newValue;\n  fragColor = ${outputFragColor};\n}\n`;\n\n  return source;\n}\n\nexport function vertices() {\n  return new Float32Array([\n    // clang-format off\n    -1, -1,\n    -1, 1,\n    1, 1,\n    1, 1,\n    -1, -1,\n    1, -1,\n    // clang-format on\n  ]);\n}\n\nexport function texCoords() {\n  return new Float32Array([\n    // clang-format off\n    0, 0,\n    0, 1,\n    1, 1,\n    1, 1,\n    0, 0,\n    1, 0,\n    // clang-format on\n  ]);\n}\n"]}