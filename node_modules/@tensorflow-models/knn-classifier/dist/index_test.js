"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var tf = require("@tensorflow/tfjs-core");
var jasmine_util_1 = require("@tensorflow/tfjs-core/dist/jasmine_util");
var knnClassifier = require("./index");
jasmine_util_1.describeWithFlags('KNNClassifier', jasmine_util_1.NODE_ENVS, function () {
    it('simple nearest neighbors', function () { return __awaiter(void 0, void 0, void 0, function () {
        var x0s, x1s, classifier, x0, x1, numTensorsBefore, result0, result1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    x0s = [
                        tf.tensor1d([1, 1, 1, 1]), tf.tensor1d([1.1, 0.9, 1.2, 0.8]),
                        tf.tensor1d([1.2, 0.8, 1.3, 0.7])
                    ];
                    x1s = [
                        tf.tensor1d([-1, -1, -1, -1]), tf.tensor1d([-1.1, -0.9, -1.2, -0.8]),
                        tf.tensor1d([-1.2, -0.8, -1.3, -0.7])
                    ];
                    classifier = knnClassifier.create();
                    x0s.forEach(function (x0) { return classifier.addExample(x0, 0); });
                    x1s.forEach(function (x1) { return classifier.addExample(x1, 1); });
                    x0 = tf.tensor1d([1.1, 1.1, 1.1, 1.1]);
                    x1 = tf.tensor1d([-1.1, -1.1, -1.1, -1.1]);
                    // Warmup.
                    return [4 /*yield*/, classifier.predictClass(x0)];
                case 1:
                    // Warmup.
                    _a.sent();
                    numTensorsBefore = tf.memory().numTensors;
                    return [4 /*yield*/, classifier.predictClass(x0)];
                case 2:
                    result0 = _a.sent();
                    expect(result0.classIndex).toBe(0);
                    return [4 /*yield*/, classifier.predictClass(x1)];
                case 3:
                    result1 = _a.sent();
                    expect(result1.classIndex).toBe(1);
                    expect(tf.memory().numTensors).toEqual(numTensorsBefore);
                    classifier.dispose();
                    return [2 /*return*/];
            }
        });
    }); });
    it('calling predictClass before adding example throws', function () { return __awaiter(void 0, void 0, void 0, function () {
        var classifier, x0, errorMessage, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    classifier = knnClassifier.create();
                    x0 = tf.tensor1d([1.1, 1.1, 1.1, 1.1]);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, classifier.predictClass(x0)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    errorMessage = error_1.message;
                    return [3 /*break*/, 4];
                case 4:
                    expect(errorMessage)
                        .toMatch(/You have not added any examples to the KNN classifier/);
                    classifier.dispose();
                    return [2 /*return*/];
            }
        });
    }); });
    it('examples with classId that does not start at 0 works', function () { return __awaiter(void 0, void 0, void 0, function () {
        var classifier, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    classifier = knnClassifier.create();
                    classifier.addExample(tf.tensor2d([5, 2], [2, 1]), 1);
                    classifier.addExample(tf.tensor2d([6, 1], [2, 1]), 2);
                    return [4 /*yield*/, classifier.predictClass(tf.tensor2d([3, 3], [2, 1]))];
                case 1:
                    result = _a.sent();
                    expect(result.classIndex).toBe(0);
                    expect(result.label).toBe('1');
                    expect(result.confidences).toEqual({ '1': 0.5, '2': 0.5 });
                    expect(classifier.getClassExampleCount()).toEqual({ 1: 1, 2: 1 });
                    classifier.dispose();
                    return [2 /*return*/];
            }
        });
    }); });
    it('examples with classId 5, 7 and 9', function () { return __awaiter(void 0, void 0, void 0, function () {
        var classifier, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    classifier = knnClassifier.create();
                    classifier.addExample(tf.tensor1d([7, 7]), 7);
                    classifier.addExample(tf.tensor1d([5, 5]), 5);
                    classifier.addExample(tf.tensor1d([9, 9]), 9);
                    classifier.addExample(tf.tensor1d([5, 5]), 5);
                    return [4 /*yield*/, classifier.predictClass(tf.tensor1d([5, 5]))];
                case 1:
                    result = _a.sent();
                    expect(result.classIndex).toBe(1);
                    expect(result.label).toBe('5');
                    expect(result.confidences).toEqual({ 5: 2 / 3, 7: 1 / 3, 9: 0 });
                    expect(classifier.getClassExampleCount()).toEqual({ 5: 2, 7: 1, 9: 1 });
                    classifier.dispose();
                    return [2 /*return*/];
            }
        });
    }); });
    it('examples with string labels', function () { return __awaiter(void 0, void 0, void 0, function () {
        var classifier, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    classifier = knnClassifier.create();
                    classifier.addExample(tf.tensor1d([7, 7]), 'a');
                    classifier.addExample(tf.tensor1d([5, 5]), 'b');
                    classifier.addExample(tf.tensor1d([9, 9]), 'c');
                    classifier.addExample(tf.tensor1d([5, 5]), 'b');
                    return [4 /*yield*/, classifier.predictClass(tf.tensor1d([5, 5]))];
                case 1:
                    result = _a.sent();
                    expect(result.classIndex).toBe(1);
                    expect(result.label).toBe('b');
                    expect(result.confidences).toEqual({ b: 2 / 3, a: 1 / 3, c: 0 });
                    expect(classifier.getClassExampleCount()).toEqual({ b: 2, a: 1, c: 1 });
                    classifier.dispose();
                    return [2 /*return*/];
            }
        });
    }); });
    it('getClassifierDataset', function () {
        var classifier = knnClassifier.create();
        classifier.addExample(tf.tensor1d([5, 5.1]), 5);
        classifier.addExample(tf.tensor1d([7, 7]), 7);
        classifier.addExample(tf.tensor1d([5.2, 5.3]), 5);
        classifier.addExample(tf.tensor1d([9, 9]), 9);
        var dataset = classifier.getClassifierDataset();
        expect(Object.keys(dataset)).toEqual(['5', '7', '9']);
        expect(dataset[5].shape).toEqual([2, 2]);
        expect(dataset[7].shape).toEqual([1, 2]);
        expect(dataset[9].shape).toEqual([1, 2]);
        classifier.dispose();
    });
    it('clearClass', function () { return __awaiter(void 0, void 0, void 0, function () {
        var classifier, numTensorsBefore, numTensorsAfter;
        return __generator(this, function (_a) {
            expect(tf.memory().numTensors).toBe(0);
            classifier = knnClassifier.create();
            tf.tidy(function () {
                classifier.addExample(tf.tensor1d([5, 5]), 5);
                classifier.addExample(tf.tensor1d([7, 7]), 7);
                classifier.addExample(tf.tensor1d([5, 5]), 5);
                classifier.addExample(tf.tensor1d([9, 9]), 9);
            });
            numTensorsBefore = tf.memory().numTensors;
            expect(classifier.getClassExampleCount()).toEqual({ 5: 2, 7: 1, 9: 1 });
            expect(classifier.getNumClasses()).toBe(3);
            expect(numTensorsBefore).toBe(3);
            classifier.clearClass(5);
            expect(classifier.getClassExampleCount()).toEqual({ 7: 1, 9: 1 });
            expect(classifier.getNumClasses()).toBe(2);
            numTensorsAfter = tf.memory().numTensors;
            expect(numTensorsAfter).toBe(2);
            classifier.clearAllClasses();
            expect(classifier.getClassExampleCount()).toEqual({});
            expect(classifier.getNumClasses()).toBe(0);
            expect(tf.memory().numTensors).toBe(0);
            classifier.dispose();
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=index_test.js.map